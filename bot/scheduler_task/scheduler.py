from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.executors.asyncio import AsyncIOExecutor
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from bot.config_data.config import API_URL
from typing import Callable
import logging
import httpx

logging.basicConfig(level=logging.INFO)


class BotScheduler:
    def __init__(self, db_url: str):
        executors = {"default": AsyncIOExecutor()}
        self.scheduler = AsyncIOScheduler(
            jobstores={"default": SQLAlchemyJobStore(url=db_url)}, executors=executors
        )
        logging.info("BotScheduler init")

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.scheduler.start()
        logging.info("BotScheduler started")

    def add_reminder(
        self,
        habit_id: int,
        chat_id: int,
        habit_name: str,
        time_str: str,
        callback: Callable[[int, int, str], None],
    ):
        """
        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:
         - chat_id: –∫—É–¥–∞ —à–ª—ë–º (Telegram chat ID)
         - habit_id: –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è
         - habit_name: —á—Ç–æ–±—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
         - time_str: 'HH:MM'
         - callback: —Ñ—É–Ω–∫—Ü–∏—è –≤–∏–¥–∞ async def callback(chat_id, habit_id, habit_name)
        """
        hour, minute, _ = map(int, time_str.split(":"))
        job_id = f"habit-{habit_id}"

        # replace_existing=True –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É (–µ—Å–ª–∏ –±—ã–ª–∞) –Ω–æ–≤–æ–π
        self.scheduler.add_job(
            func=callback,
            trigger=CronTrigger(hour=hour, minute=minute),
            args=[chat_id, habit_id, habit_name],
            id=job_id,
            replace_existing=True,
        )
        logging.info(f"üìå –ó–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–∏–≤—ã—á–∫—É {habit_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è —é–∑–µ—Ä–∞ {chat_id}")

    def remove_reminder(self, habit_id: int):
        job_id = f"habit-{habit_id}"

        try:
            self.scheduler.remove_job(job_id)
            logging.info(f"‚ùå –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {job_id}")
        except Exception:
            logging.warning(f"–∑–∞–¥–∞—á–∞ {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

    async def sync_with_db(self, func: Callable):
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
        - –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏–∑ –±–∞–∑—ã.
        - –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –Ω–µ—Ç –≤ –±–∞–∑–µ.
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ –±–∞–∑—ã
            async with httpx.AsyncClient() as client:
                resp = await client.get(f"{API_URL}/habit/habits_all")
            resp.raise_for_status()
            data = resp.json()
            habits = data["habits"]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫: {e}")
            return

        existing_job_ids = {job.id for job in self.scheduler.get_jobs()}

        db_job_ids = set()
        for habit in habits:
            habit_id = habit["habit_id"]
            job_id = f"habit-{habit_id}"
            db_job_ids.add(job_id)

            self.add_reminder(
                habit_id=habit_id,
                chat_id=habit["chat_id"],
                habit_name=habit["habit_name"],
                time_str=habit["time_str"],
                callback=func,
            )

        for job_id in existing_job_ids - db_job_ids:
            try:
                self.scheduler.remove_job(job_id)
                logging.info(f"üßπ –£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –∑–∞–¥–∞—á–∞: {job_id}")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É: {job_id}. –û—à–∏–±–∫–∞ {e}")

    def add_daily_decrement_job(self, func: Callable):
        """
        –°—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –Ω–∞ –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 23:59,
        –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–æ–≤–µ—Ç POST /habit/decrease_uncompleted.
        """

        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ lambda, —á—Ç–æ–±—ã APScheduler –∑–Ω–∞–ª –æ–±—ã—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        self.scheduler.add_job(
            func=func,
            trigger=CronTrigger(hour=23, minute=59),
            id="decrement_habits_job",
            replace_existing=True,
        )
        logging.info(
            "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ decrement_uncompleted –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 23:59"
        )
